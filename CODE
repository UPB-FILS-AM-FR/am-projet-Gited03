#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 10
#define RST_PIN 9
#define GREEN_LED_PIN 7
#define RED_LED_PIN 3

MFRC522 mfrc522(SS_PIN, RST_PIN);
byte firstTagData[96]; // Buffer to store data from blocks 5 to 10 of the first tag
bool firstTagRead = false;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  
  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);

  // Turn on the red LED
  digitalWrite(RED_LED_PIN, HIGH);

  Serial.println("RFID Reader Initialized. Place your card on the reader...");
}

void loop() {
  // Check if a card is present
  if (!mfrc522.PICC_IsNewCardPresent()) {
    delay(50);
    digitalWrite(RED_LED_PIN, HIGH); // Ensure the red LED stays on
    return;
  }

  // Read card UID
  if (!mfrc522.PICC_ReadCardSerial()) {
    delay(50);
    digitalWrite(RED_LED_PIN, HIGH); // Ensure the red LED stays on
    return;
  }

  // Display UID
  Serial.print("UID tag: ");
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();

  // Turn on the green LED and turn off the red LED
  digitalWrite(GREEN_LED_PIN, HIGH);
  digitalWrite(RED_LED_PIN, LOW);

  // Authenticate with the default key
  MFRC522::MIFARE_Key key;
  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

  if (!firstTagRead) {
    // Read data from blocks 5 to 10 of the first tag
    byte readBuffer[18];
    byte size = sizeof(readBuffer);
    for (byte block = 5; block <= 10; block++) {
      // Retry loop for authentication
      for (byte attempt = 0; attempt < 3; attempt++) {
        MFRC522::StatusCode status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(
          MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));
        if (status == MFRC522::STATUS_OK) {
          status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(block, readBuffer, &size);
          if (status == MFRC522::STATUS_OK) {
            Serial.print("Data read from block ");
            Serial.print(block);
            Serial.print(": ");
            for (uint8_t i = 0; i < 16; i++) {
              Serial.write(readBuffer[i]);
              firstTagData[(block - 5) * 16 + i] = readBuffer[i]; // Store data from the block
            }
            Serial.println();
            break; // Break the retry loop on successful read
          } else {
            Serial.print("Error reading data from block ");
            Serial.print(block);
            Serial.print(": ");
            Serial.println(mfrc522.GetStatusCodeName(status));
          }
        } else {
          Serial.print("PCD_Authenticate() failed for block ");
          Serial.print(block);
          Serial.print(": ");
          Serial.println(mfrc522.GetStatusCodeName(status));
        }
        delay(100); // Delay before retrying
      }
    }
    firstTagRead = true; // Indicate that the first tag has been read
    Serial.println("Now place the second card on the reader...");
  } else {
    // Write data to blocks 5 to 10 of the second tag
    for (byte block = 5; block <= 10; block++) {
      // Retry loop for authentication
      for (byte attempt = 0; attempt < 3; attempt++) {
        MFRC522::StatusCode status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(
          MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, &key, &(mfrc522.uid));
        if (status == MFRC522::STATUS_OK) {
          status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(block, firstTagData + (block - 5) * 16, 16);
          if (status == MFRC522::STATUS_OK) {
            Serial.print("Data written to block ");
            Serial.print(block);
            Serial.println(" successfully.");
            break; // Break the retry loop on successful write
          } else {
            Serial.print("Error writing data to block ");
            Serial.print(block);
            Serial.print(": ");
            Serial.println(mfrc522.GetStatusCodeName(status));
          }
        } else {
          Serial.print("PCD_Authenticate() failed for block ");
          Serial.print(block);
          Serial.print(": ");
          Serial.println(mfrc522.GetStatusCodeName(status));
        }
        delay(100); // Delay before retrying
      }
    }
    firstTagRead = false; // Reset the flag for the next pair of tags
    Serial.println("Place the next first card on the reader...");

    // Flash both LEDs alternately 15 times with 80ms delay
    for (int i = 0; i < 15; i++) {
      digitalWrite(GREEN_LED_PIN, LOW);
      digitalWrite(RED_LED_PIN, HIGH);
      delay(80);
      digitalWrite(GREEN_LED_PIN, HIGH);
      digitalWrite(RED_LED_PIN, LOW);
      delay(80);
    }
  }

  // Halt PICC
  mfrc522.PICC_HaltA();

  // Stop encryption on PCD
  mfrc522.PCD_StopCrypto1();

  delay(2000); // Wait before processing another card

  // Turn off the green LED and turn on the red LED after the delay
  digitalWrite(GREEN_LED_PIN, LOW);
  digitalWrite(RED_LED_PIN, HIGH);
}
